var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this section we show examples of applications and use cases of the package.","category":"page"},{"location":"examples/#Nile-river-annual-flow","page":"Examples","title":"Nile river annual flow","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here we will follow an example from Durbin & Koopman's book. We will use the LocalLevel model applied to the annual flow of the Nile river at the city of Aswan between 1871 and 1970.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels\nusing Plots\nusing Dates","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, we load the data:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames\nnile = CSV.File(StateSpaceModels.NILE) |> DataFrame\nplt = plot(nile.year, nile.flow, label = \"Nile river annual flow\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we fit a LocalLevel model:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = LocalLevel(nile.flow)\nfit!(model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can analyze the filtered estimates for the level of the annual flow:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"filter_output = kalman_filter(model)\nplot!(plt, nile.year, get_filtered_state(filter_output), label = \"Filtered level\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can do the same for the smoothed estimates for the level of the annual flow:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"smoother_output = kalman_smoother(model)\nplot!(plt, nile.year, get_smoothed_state(smoother_output), label = \"Smoothed level\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"StateSpaceModels.jl can also be used to obtain forecasts. Here we forecast 10 steps ahead:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"steps_ahead = 10\ndates = collect(nile.year[end] + Year(1):Year(1):nile.year[end] + Year(10))\nforec = forecast(model, 10)\nexpected_value = forecast_expected_value(forec)\nplot!(plt, dates, expected_value, label = \"Forecast\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also simulate multiple scenarios for the forecasting horizon based on the estimated predictive distributions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"scenarios = simulate_scenarios(model, 10, 100)\nplot!(plt, dates, scenarios[:, 1, :], label = \"\", color = \"grey\", width = 0.2)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The package also handles missing values automatically. To that end, the package considers that any NaN entries in the observations are missing values.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"nile.flow[[collect(21:40); collect(61:80)]] .= NaN\nplt = plot(nile.year, nile.flow, label = \"Annual nile river flow\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Even though the series has several missing values, the same analysis is possible:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = LocalLevel(nile.flow)\nfit!(model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And the exact same code can be used for filtering and smoothing:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"filter_output = kalman_filter(model)\nsmoother_output = kalman_smoother(model)\nplot!(plt, nile.year, get_filtered_state(filter_output), label = \"Filtered level\")\nplot!(plt, nile.year, get_smoothed_state(smoother_output), label = \"Smoothed level\")","category":"page"},{"location":"examples/#Airline-passengers","page":"Examples","title":"Airline passengers","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We often write the model SARIMA model as an ARIMA (pdq) times (PDQs), where the lowercase letters indicate the specification for the non-seasonal component, and the uppercase letters indicate the specification for the seasonal component; s is the periodicity of the seasons (e.g. it is often 4 for quarterly data or 12 for monthly data). The data process can be written generically as","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginequation\n    phi_p (L) tilde phi_P (L^s) Delta^d Delta_s^D y_t = A(t) + theta_q (L) tilde theta_Q (L^s) epsilon_t\nendequation","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"phi_p (L) is the non-seasonal autoregressive lag polynomial,\ntilde phi_P (L^s) is the seasonal autoregressive lag polynomial,\nDelta^d Delta_s^D y_t is the time series, differenced d times, and seasonally differenced D times.,\nA(t) is the trend polynomial (including the intercept),\ntheta_q (L) is the non-seasonal moving average lag polynomial,\ntilde theta_Q (L^s) is the seasonal moving average lag polynomial","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sometimes we rewrite this as:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginequation\n    phi_p (L) tilde phi_P (L^s) y_t^* = A(t) + theta_q (L) tilde theta_Q (L^s) epsilon_t\nendequation","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where y_t^* = Delta^d Delta_s^D y_t. This emphasizes that just as in the simple case, after we take differences (here both non-seasonal and seasonal) to make the data stationary, the resulting model is just an ARMA model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"As an example, consider the airline model ARIMA (011) times (01112). The data process can be written in the form above as:,","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginequation\n    Delta Delta_12 y_t = (1 - theta_1 L) (1 - tilde theta_1 L^12) epsilon_t\nendequation","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here, we have:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"phi_p (L) = 1, (i.e. there is no auto regressive effect)\ntilde phi_P (L^s) = 1, (i.e. there is no seasonal auto regressive effect)\nd = 1 D = 1 s=12 indicating that y_t^* is derived from y_t by taking first-differences and then taking 12-th differences.,\nA(t) = 0 no trend,\ntheta_q (L) = (1 - theta_1 L),\ntilde theta_Q (L^s) = (1 - tilde theta_1 L^12),","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"It may still be confusing to see the two lag polynomials in front of the error variable, but notice that we can multiply the lag polynomials together to get the following model:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginequation\n    y_t^* = (1 - theta_1 L - tilde theta_1 L^12 + theta_1 tilde theta_1 L^13) epsilon_t\nendequation","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For the airline model ARIMA (011) times (01112) with an intercept, the command is:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels, CSV, DataFrames\nusing Plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames\nair_passengers = CSV.File(StateSpaceModels.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(air_passengers.passengers)\nmodel = SARIMA(log_air_passengers; order = (0, 1, 1), seasonal_order = (0, 1, 1, 12))\nfit!(model)\nprint_results(model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To make a forecast of 24 steps ahead of the model the command is:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"forec = forecast(model, 24)\nplot(model, forec; legend = :topleft)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The text from this example is based on Python`s statsmodels library. The estimates for this example match up to the 3th decimal place the results of the paper State Space Methods in Ox/SsfPack from the journal of statistical software.","category":"page"},{"location":"examples/#Finland-road-traffic-fatalities","page":"Examples","title":"Finland road traffic fatalities","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example, we will follow what is illustrated on Commandeur, Jacques J.F. & Koopman,  Siem Jan, 2007. \"An Introduction to State Space Time Series Analysis,\" OUP Catalogue,  Oxford University Press (Chapter 3). We will study the LocalLinearTrend model with  a series of the log of road traffic fatalities in Finalnd and analyse its slope to tell if the trend of fatalities was increasing or decrasing during different periods of time.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels\nusing Plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels, Plots, CSV, DataFrames\ndf = CSV.File(StateSpaceModels.VEHICLE_FATALITIES) |> DataFrame\nlog_ff = log.(df.ff)\nplt = plot(df.date, log_ff, label = \"Log of Finland road traffic fatalities\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We fit a LocalLinearTrend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = LocalLinearTrend(log_ff)\nfit!(model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"By extracting the smoothed slope we conclude that according to our model the trend of fatalities  in Finland was increasing in the years 1970, 1982, 1984 through to 1988, and in 1998","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"smoother_output = kalman_smoother(model)\nplot(df.date, get_smoothed_state(smoother_output)[:, 2], label = \"slope\")","category":"page"},{"location":"examples/#Vehicle-tracking","page":"Examples","title":"Vehicle tracking","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example illustrates how to perform vehicle tracking from noisy data.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels, Random\nusing Plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Random\nRandom.seed!(1)\n\n# Define a random trajectory\nn = 100\nH = [1 0; 0 1.0]\nQ = [1 0; 0 1.0]\nrho = 0.1\nmodel = VehicleTracking(rand(n, 2), rho, H, Q)\ninitial_state = [0.0, 0, 0, 0]\nsim = StateSpaceModels.simulate(model.system, initial_state, n)\n\n# Use a Kalman filter to get the predictive and filtered states\nmodel = VehicleTracking(sim, 0.1, H, Q)\nkalman_filter(model)\npos_pred = get_predictive_state(model)\npos_filtered = get_filtered_state(model)\n\n# Plot a gif illustrating the result\nusing Plots\nanim = @animate for i in 1:n\n    plot(sim[1:i, 1], sim[1:i, 2], label=\"Measured position\", line=:scatter, lw=2, markeralpha=0.2, color=:black, title=\"Vehicle tracking\")\n    plot!(pos_pred[1:i+1, 1], pos_pred[1:i+1, 3], label = \"Predicted position\", lw=2, color=:forestgreen)\n    plot!(pos_filtered[1:i, 1], pos_filtered[1:i, 3], label = \"Filtered position\", lw=2, color=:indianred)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"examples/#Cross-validation-of-the-forecasts-of-a-model","page":"Examples","title":"Cross validation of the forecasts of a model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Often times users would like to compare the forecasting skill of different models. The function  cross_validation makes it easy to make a rolling window scheme of estimations and forecasts  that allow users to track each model forecasting skill per lead time. A simple plot recipe is implemented to help users to interpret the results easily.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StateSpaceModels, CSV, DataFrames\nusing Plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames\nair_passengers = CSV.File(StateSpaceModels.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(air_passengers.passengers)\nmodel = BasicStructural(log_air_passengers, 12)\nb = cross_validation(model, 24, 50)\nplot(b, \"Basic structural model\")","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Quick-Start-Guide","page":"Manual","title":"Quick Start Guide","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Although StateSpaceModels.jl has a lot of functionalities, different models and interfaces  users usuallly just want to fit a model and analyse the residuals, components and make some forecasts. The following code is a quick start to perform these tasks","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"import Pkg\n\nPkg.add(\"StateSpaceModels\")\n\nusing StateSpaceModels\n\ny = randn(100)\n\nmodel = LocalLevel(y)\n\nfit!(model)\n\nprint_results(model)\n\nforec = forecast(model, 10)\n\nkf = kalman_filter(model)\n\nv = get_innovations(kf)\n\nks = kalman_smoother(model)\n\nalpha = get_smoothed_state(ks)\n\nusing Plots\n\nplot(model, forec)\n\nplotdiagnostics(kf)","category":"page"},{"location":"manual/#Models","page":"Manual","title":"Models","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package provides a variaty of pre-defined models. If there is any model that you wish was in the package, feel free to open an issue or pull request.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"UnobservedComponents\nExponentialSmoothing\nSARIMA\nDAR\nBasicStructural\nBasicStructuralExplanatory\nLinearRegression\nLocalLevel\nLocalLevelCycle\nLocalLevelExplanatory\nLocalLinearTrend\nMultivariateBasicStructural\nVehicleTracking","category":"page"},{"location":"manual/#StateSpaceModels.UnobservedComponents","page":"Manual","title":"StateSpaceModels.UnobservedComponents","text":"UnobservedComponents(\n    y::Vector{Fl}; \n    trend::String = \"local level\",\n    seasonal::String = \"no\"\n    cycle::String = \"no\"\n) where Fl\n\nAn unobserved components model that can have trend/level, seasonal and cycle components.  Each component should be specified by strings, if the component is not desired in the model  a string with \"no\" can be passed as keyword argument. \n\nThese models take the general form \n\nbegingather*\n    beginaligned\n    y_t = mu_t + gamma_t + c_t + varepsilon_t\n    endaligned\nendgather*\n\nwhere y_t refers to the observation vector at time t, mu_t refers to the trend component, gamma_t refers to the seasonal component, c_t refers to the cycle, and varepsilon_t is the irregular. The modeling details of these components are given below.\n\nTrend\n\nThe trend component can be modeled in a lot of different ways, usually it is called level when there is no slope component. The modelling options can be expressed as in the example trend = \"local level\".\n\nLocal Level\n\nstring: \"local level\"\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + eta_t quad eta_t sim mathcalN(0 sigma^2_eta)\n    endaligned\nendgather*\n\nRandom Walk\n\nstring: \"random walk\"\n\nbegingather*\n    beginaligned\n        y_t =  mu_t\n        mu_t+1 = mu_t + eta_t quad eta_t sim mathcalN(0 sigma^2_eta)\n    endaligned\nendgather*\n\nLocal Linear Trend\n\nstring: \"local linear trend\"\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + gamma_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + nu_t + xi_t quad xi_t sim mathcalN(0 sigma^2_xi)\n        nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 sigma^2_zeta)\n    endaligned\nendgather*\n\nSmooth Trend\n\nstring: \"smooth trend\"\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + gamma_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + nu_t\n        nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 sigma^2_zeta)\n    endaligned\nendgather*\n\nSeasonal\n\nThe seasonal component is modeled as:\n\nbegingather*\n    beginaligned\n    gamma_t = - sum_j=1^s-1 gamma_t+1-j + omega_t quad omega_t sim N(0 sigma^2_omega)\n    endaligned\nendgather*\n\nThe periodicity (number of seasons) is s, and the defining character is that (without the error term), the seasonal components sum to zero across one complete cycle. The inclusion of an error term allows the seasonal effects to vary over time. The modelling options can be expressed in terms of \"deterministic\" or \"stochastic\" and the periodicity as a number in  the string, i.e., seasonal = \"stochastic 12\".\n\nCycle\n\nThe cycle component is modeled as\n\nbegingather*\n    beginaligned\n        c_t+1 = rho_c left(c_t cos(lambda_c) + c_t^* sin(lambda_c)right) quad  tildeomega_t sim mathcalN(0 sigma^2_tildeomega)\n        c_t+1^* = rho_c left(-c_t sin(lambda_c) + c_t^* sin(lambda_c)right) quad tildeomega^*_t sim mathcalN(0 sigma^2_tildeomega)\n    endaligned\nendgather*\n\nThe cyclical component is intended to capture cyclical effects at time frames much longer  than captured by the seasonal component. The parameter lambda_c is the frequency of the cycle and it is estimated via maximum likelihood. The inclusion of error terms allows the cycle effects to vary over time. The modelling options can be expressed in terms of \"deterministic\" or \"stochastic\" and the damping effect as a string, i.e.,  cycle = \"stochastic\", cycle = \"deterministic\" or cycle = \"stochastic damped\".\n\nThe UnobservedComponents model has some dedicated Plot Recipes, see Visualization\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. Time Series Analysis by State Space Methods: Second Edition.  Oxford University Press, 2012\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.ExponentialSmoothing","page":"Manual","title":"StateSpaceModels.ExponentialSmoothing","text":"ExponentialSmoothing(\n    y::Vector{Fl}; \n    trend::Bool = false,\n    damped_trend::Bool = false,\n    seasonal::Int = 0\n) where Fl\n\nLinear exponential smoothing models. These models are also known as ETS in the literature. This model is estimated using the Kalman filter for linear Gaussian state space models, for this reason the possible models are the following ETS with additive errors:\n\nETS(A, N, N)\nETS(A, A, N)\nETS(A, Ad, N)\nETS(A, N, A)\nETS(A, A, A)\nETS(A, Ad, A)\n\nOther softwares have use the augmented least squares approach and have all the possible ETS  combinations. The Kalman filter approach might be slower than others but have the advantages of filtering the components.\n\nReferences\n\nHyndman, Rob, Anne B. Koehler, J. Keith Ord, and Ralph D. Snyder. Forecasting with exponential smoothing: the state space approach. Springer Science & Business Media, 2008.\nHyndman, Robin John; Athanasopoulos, George.  Forecasting: Principles and Practice.  2nd ed. OTexts, 2018.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.SARIMA","page":"Manual","title":"StateSpaceModels.SARIMA","text":"SARIMA(\n    y::Vector{Fl}; \n    order::Tuple{Int,Int,Int} = (1, 0, 0), \n    seasonal_order::Tuple{Int, Int, Int, Int} = (0, 0, 0, 0),\n    include_mean::Bool = false,\n    suppress_warns::Bool = false\n) where Fl\n\nA SARIMA model (Seasonal AutoRegressive Integrated Moving Average) implemented within the state-space framework.\n\nThe SARIMA model is specified (p d q) times (P D Q s). We can also consider a polynomial A(t) to  model a trend, here we only allow to add a constante term with the include_mean keyword argument.    \n\nbegingather*\n    beginaligned\n        phi_p (L) tilde phi_P (L^s) Delta^d Delta_s^D y_t = A(t) + theta_q (L) tilde theta_Q (L^s) zeta_t\n    endaligned\nendgather*\n\nIn terms of a univariate structural model, this can be represented as\n\nbegingather*\n    beginaligned\n    y_t  = u_t + eta_t \n    phi_p (L) tilde phi_P (L^s) Delta^d Delta_s^D u_t  = A(t) + theta_q (L) tilde theta_Q (L^s) zeta_t\n    endaligned\nendgather*\n\nExample\n\njulia> model = SARIMA(rand(100); order=(1,1,1), seasonal_order=(1,2,3,12))\nSARIMA(1, 1, 1)x(1, 2, 3, 12) model\n\nSee more on Airline passengers\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. Time Series Analysis by State Space Methods: Second Edition.  Oxford University Press, 2012\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.DAR","page":"Manual","title":"StateSpaceModels.DAR","text":"DAR(y::Vector{Fl}, lags::Int) where Fl\n\nA Dynamic Autorregressive model is defined by:\n\nbegingather*\n    beginaligned\n        y_t = phi_0 + sum_i=1^lags phi_i t y_t - i + varepsilon_t  quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        phi_i t+1 = phi_i t + etai t  quad etai t sim mathcalN(0 sigma^2_i eta)\n    endaligned\nendgather*\n\n!!!! note System matrices     When building the system matrices we get rid of the first lags observations      in order to build all system matrices respecting the correspondent timestamps\n\n!!! warning Forecasting     The dynamic autorregressive model does not have the forecast method implemented yet.      If you wish to perform forecasts with this model please open an issue.\n\n!!! warning Missing values     The dynamic autorregressive model currently does not support missing values (NaN observations.)\n\nExample\n\njulia> model = DAR(randn(100), 2)\nDAR\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.BasicStructural","page":"Manual","title":"StateSpaceModels.BasicStructural","text":"BasicStructural(y::Vector{Fl}, s::Int) where Fl\n\nThe basic structural state-space model consists of a trend (level + slope) and a seasonal component. It is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + gamma_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + nu_t + xi_t quad xi_t sim mathcalN(0 sigma^2_xi)\n        nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 sigma^2_zeta)\n        gamma_t+1 = -sum_j=1^s-1 gamma_t+1-j + omega_t quad  omega_t sim mathcalN(0 sigma^2_omega)\n    endaligned\nendgather*\n\nExample\n\njulia> model = BasicStructural(rand(100), 12)\nBasicStructural\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.BasicStructuralExplanatory","page":"Manual","title":"StateSpaceModels.BasicStructuralExplanatory","text":"BasicStructuralExplanatory(y::Vector{Fl}, s::Int, X::Matrix{Fl}) where Fl\n\nIt is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + gamma_t + beta_t iX_t i varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + nu_t + xi_t quad xi_t sim mathcalN(0 sigma^2_xi)\n        nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 sigma^2_zeta)\n        gamma_t+1 = -sum_j=1^s-1 gamma_t+1-j + omega_t quad  omega_t sim mathcalN(0 sigma^2_omega)\n        beta_t+1 = beta_t\n    endaligned\nendgather*\n\nExample\n\njulia> model = BasicStructuralExplanatory(rand(100), 12, rand(100, 2))\nBasicStructuralExplanatory\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LinearRegression","page":"Manual","title":"StateSpaceModels.LinearRegression","text":"LinearRegression(X::Matrix{Fl}, y::Vector{Fl}) where Fl\n\nThe linear regression state-space model is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  X_1t cdot beta_1t + dots + X_nt cdot beta_nt + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        beta_1t+1 = beta_1t\n        dots = dots\n        beta_nt+1 = beta_nt\n    endaligned\nendgather*\n\nExample\n\njulia> model = LinearRegression(rand(100, 2), rand(100))\nLinearRegression\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LocalLevel","page":"Manual","title":"StateSpaceModels.LocalLevel","text":"LocalLevel(y::Vector{Fl}) where Fl\n\nThe local level model is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + eta_t quad eta_t sim mathcalN(0 sigma^2_eta)\n    endaligned\nendgather*\n\nExample\n\njulia> model = LocalLevel(rand(100))\nLocalLevel\n\nSee more on Nile river annual flow\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press. pp. 9\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LocalLevelCycle","page":"Manual","title":"StateSpaceModels.LocalLevelCycle","text":"LocalLevelCycle(y::Vector{Fl}) where Fl\n\nThe local level model with a cycle component is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + c_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + eta_t quad eta_t sim mathcalN(0 sigma^2_eta)\n        c_t+1 = c_t cos(lambda_c) + c_t^* sin(lambda_c) quad  tildeomega_t sim mathcalN(0 sigma^2_tildeomega)\n        c_t+1^* = -c_t sin(lambda_c) + c_t^* sin(lambda_c) quad tildeomega^*_t sim mathcalN(0 sigma^2_tildeomega)\n    endaligned\nendgather*\n\nExample\n\njulia> model = LocalLevelCycle(rand(100))\nLocalLevelCycle\n\nSee more on TODO RJ_TEMPERATURE\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press. pp. 48\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LocalLevelExplanatory","page":"Manual","title":"StateSpaceModels.LocalLevelExplanatory","text":"LocalLevelExplanatory(y::Vector{Fl}, X::Matrix{Fl}) where Fl\n\nA local level model with explanatory variables is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + X_1t cdot beta_1t + dots + X_nt cdot beta_nt + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + xi_t xi_t sim mathcalN(0 sigma^2_xi)\n        beta_1t+1 = beta_1t tau_1 t sim mathcalN(0 sigma^2_tau_1)\n        dots = dots\n        beta_nt+1 = beta_nt tau_n t sim mathcalN(0 sigma^2_tau_n)\n    endaligned\nendgather*\n\nExample\n\njulia> model = LocalLevelExplanatory(rand(100), rand(100, 1))\nLocalLevelExplanatory\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LocalLinearTrend","page":"Manual","title":"StateSpaceModels.LocalLinearTrend","text":"LocalLinearTrend(y::Vector{Fl}) where Fl\n\nThe linear trend model is defined by:\n\nbegingather*\n    beginaligned\n        y_t =  mu_t + gamma_t + varepsilon_t quad varepsilon_t sim mathcalN(0 sigma^2_varepsilon)\n        mu_t+1 = mu_t + nu_t + xi_t quad xi_t sim mathcalN(0 sigma^2_xi)\n        nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 sigma^2_zeta)\n    endaligned\nendgather*\n\nExample\n\njulia> model = LocalLinearTrend(rand(100))\nLocalLinearTrend\n\nSee more on Finland road traffic fatalities\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods:  Second Edition.\" Oxford University Press. pp. 44\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.MultivariateBasicStructural","page":"Manual","title":"StateSpaceModels.MultivariateBasicStructural","text":"MultivariateBasicStructural(y::Matrix{Fl}, s::Int) where Fl\n\nAn implementation of a non-homogeneous seemingly unrelated time series equations for basic structural state-space model consists of trend (local linear trend) and seasonal components. It is defined by:\n\nbegingather*\n    beginaligned\n    y_t =  mu_t + gamma_t + varepsilon_t quad varepsilon_t sim mathcalN(0 Sigma_varepsilon)\n    mu_t+1 = mu_t + nu_t + xi_t quad xi_t sim mathcalN(0 Sigma_xi)\n    nu_t+1 = nu_t + zeta_t quad zeta_t sim mathcalN(0 Sigma_zeta)\n    gamma_t+1 = -sum_j=1^s-1 gamma_t+1-j + omega_t quad  omega_t sim mathcalN(0 Sigma_omega)\n    endaligned\nendgather*\n\nExample\n\njulia> model = MultivariateBasicStructural(rand(100, 2), 12)\nMultivariateBasicStructural\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.VehicleTracking","page":"Manual","title":"StateSpaceModels.VehicleTracking","text":"VehicleTracking(y::Matrix{Fl}, ρ::Fl, H::Matrix{Fl}, Q::Matrix{Fl}) where Fl\n\nThe vehicle tracking example illustrates a model where there are no hyperparameters,  the user defines the parameters rho, H and Q and the model gives the predicted and filtered speed and position. In this case, y_t is a 2 times 1 observation vector representing the corrupted measurements  of the vehicle's position on the two-dimensional plane in instant t.\n\nThe position and speed in each dimension compose the state of the vehicle. Let us refer to x_t^(d) as  the position on the axis d and to dotx^(d)_t as the speed on the axis d in instant t. Additionally,  let eta^(d)_t be the input drive force on the axis d, which acts as state noise. For a single dimension,  we can describe the vehicle dynamics as \n\nbeginequation\n    beginaligned\n         x_t+1^(d) = x_t^(d) + Big( 1 - fracrho Delta_t2 Big) Delta_t dotx^(d)_t + fracDelta^2_t2 eta_t^(d) \n         dotx^(d)_t+1 = (1 - rho) dotx^(d)_t + Delta_t eta^(d)_t\n    endalignedlabeleq_control\nendequation\n\nWe can cast the dynamical system as a state-space model in the following manner:\n\nbeginalign* \n    y_t = beginbmatrix 1  0  0  0  0  0  1  0 endbmatrix alpha_t+1 + varepsilon_t \n    alpha_t+1 = beginbmatrix 1  (1 - tfracrho Delta_t2) Delta_t  0  0  0  (1 - rho)  0  0  0  0  1  (1 - tfracrho Delta_t2)  0  0  0  (1 - rho) endbmatrix alpha_t + beginbmatrix tfracDelta^2_t2  0  Delta_t  0  0  tfracDelta^2_t2  0  Delta_t endbmatrix eta_t\nendalign*\n\nSee more on Vehicle tracking\n\n\n\n\n\n","category":"type"},{"location":"manual/#Naive-models","page":"Manual","title":"Naive models","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Naive models are not state space models but are good benchmarks for forecasting, for this reason we implemented them here.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Naive\nSeasonalNaive\nExperimentalSeasonalNaive","category":"page"},{"location":"manual/#StateSpaceModels.Naive","page":"Manual","title":"StateSpaceModels.Naive","text":"Naive(y::Vector{<:Real})\n\nA naive model where the h step ahead forecast is \n\ny_T+hT = y_T\n\nReferences\n\nHyndman, Rob J., Athanasopoulos, George. \"Forecasting: Principles and Practice\"\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.SeasonalNaive","page":"Manual","title":"StateSpaceModels.SeasonalNaive","text":"SeasonalNaive(y::Vector{<:Real}, seasoanl::Int)\n\nA seasonal naive model where the h step ahead forecast is \n\ny_T+hT = y_T + h - m(k+1)\n\nwhere m is the seasonal period and k is the integer part of (h-1)/m.\n\nReferences\n\nHyndman, Rob J., Athanasopoulos, George. \"Forecasting: Principles and Practice\"\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.ExperimentalSeasonalNaive","page":"Manual","title":"StateSpaceModels.ExperimentalSeasonalNaive","text":"ExperimentalSeasonalNaive(y::Vector{<:Real}, seasonal::Int; S::Int = 10_000)\n\nA seasonal naive model where the h step ahead forecast is the mean of the simulation  of S scenarios \n\ny_T+hT = y_T + h - m(k+1) + varepsilon_t\n\nwhere m is the seasonal period, k is the integer part of (h-1)/m and varepsilon_t is a sampled error. \n\nWe call it experimental because so far we could not find a good reference and implementation. If you know something please post it as an issue.\n\n\n\n\n\n","category":"type"},{"location":"manual/#Automatic-forecasting","page":"Manual","title":"Automatic forecasting","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Some models have various parameters and modelling options. The package provides simple functions that search through different parameters to obtain the best fit for your data without a deeper understanding. The search procedures can be published in scientific papers or purely heuristic designed by the developers. In any case if the documentation explains the procedures and indicates if there are any references.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"auto_ets\nauto_arima","category":"page"},{"location":"manual/#StateSpaceModels.auto_ets","page":"Manual","title":"StateSpaceModels.auto_ets","text":"auto_ets(y::Vector{Fl}; seasonal::Int = 0) where Fl\n\nAutomatically fits the best ExponentialSmoothing model according to the best AIC  between the models:\n\nETS(A, N, N)\nETS(A, A, N)\nETS(A, Ad, N)\n\nIf the user provides the time series seasonality it will search between the models\n\nETS(A, N, A)\nETS(A, A, A)\nETS(A, Ad, A)\n\nReferences\n\nHyndman, Robin John; Athanasopoulos, George. \n\nForecasting: Principles and Practice.   2nd ed. OTexts, 2018.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.auto_arima","page":"Manual","title":"StateSpaceModels.auto_arima","text":"auto_arima(y::Vector{Fl};\n           seasonal::Int = 0,\n           max_p::Int = 5,\n           max_q::Int = 5,\n           max_P::Int = 2,\n           max_Q::Int = 2,\n           max_d::Int = 2,\n           max_D::Int = 1,\n           max_order::Int = 5,\n           information_criteria::String = \"aicc\",\n           allow_mean::Bool = true,\n           show_trace::Bool = false,\n           integration_test::String = \"kpss\",\n           seasonal_integration_test::String = \"seas\"\n           ) where Fl\n\nAutomatically fits the best SARIMA model according to the best information criteria \n\nTODO write example\n\nReferences\n\nHyndman, RJ and Khandakar. \n\nAutomatic time series forecasting: The forecast package for R. Journal of Statistical Software, 26(3), 2008.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Implementing-a-custom-model","page":"Manual","title":"Implementing a custom model","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Users are able to implement any custom user-defined model.","category":"page"},{"location":"manual/#Systems","page":"Manual","title":"Systems","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The StateSpaceModel matrices are represented as a StateSpaceSystem.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceModels.StateSpaceSystem\nLinearUnivariateTimeInvariant\nLinearUnivariateTimeVariant\nLinearMultivariateTimeInvariant\nLinearMultivariateTimeVariant","category":"page"},{"location":"manual/#StateSpaceModels.StateSpaceSystem","page":"Manual","title":"StateSpaceModels.StateSpaceSystem","text":"StateSpaceSystem\n\nAbstract type that unifies the definition of state space models matrices such as y Z d T c R H Q for linear models.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LinearUnivariateTimeInvariant","page":"Manual","title":"StateSpaceModels.LinearUnivariateTimeInvariant","text":"LinearUnivariateTimeInvariant{Fl}(\n    y::Vector{Fl},\n    Z::Vector{Fl},\n    T::Matrix{Fl},\n    R::Matrix{Fl},\n    d::Fl,\n    c::Vector{Fl},\n    H::Fl,\n    Q::Matrix{Fl},\n) where Fl <: AbstractFloat\n\nDefinition of the system matrices y Z d T c R H Q for linear univariate time invariant state space models.\n\nbegingather*\n    beginaligned\n        y_t =  Zalpha_t + d + varepsilon_t quad varepsilon_t sim mathcalN(0 H)\n        alpha_t+1 = Talpha_t + c + Reta_t quad eta_t sim mathcalN(0 Q)\n    endaligned\nendgather*\n\nwhere:\n\ny_t is a scalar\nZ is a m times 1 vector\nd is a scalar\nT is a m times m matrix\nc is a m times 1 vector\nR is a m times r matrix\nH is a scalar\nQ is a r times r matrix\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LinearUnivariateTimeVariant","page":"Manual","title":"StateSpaceModels.LinearUnivariateTimeVariant","text":"LinearUnivariateTimeVariant{Fl}(\n    y::Vector{Fl},\n    Z::Vector{Vector{Fl}},\n    T::Vector{Matrix{Fl}},\n    R::Vector{Matrix{Fl}},\n    d::Vector{Fl},\n    c::Vector{Vector{Fl}},\n    H::Vector{Fl},\n    Q::Vector{Matrix{Fl}},\n) where Fl <: AbstractFloat\n\nDefinition of the system matrices y Z d T c R H Q for linear univariate time variant state space models.\n\nbegingather*\n    beginaligned\n        y_t =  Z_talpha_t + d_t + varepsilon_t quad varepsilon_t sim mathcalN(0 H_t)\n        alpha_t+1 = T_talpha_t + c_t + R_teta_t quad eta_t sim mathcalN(0 Q_t)\n    endaligned\nendgather*\n\nwhere:\n\ny_t is a scalar\nZ_t is a m times 1 vector\nd_t is a scalar\nT_t is a m times m matrix\nc_t is a m times 1 vector\nR_t is a m times r matrix\nH_t is a scalar\nQ_t is a r times r matrix\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LinearMultivariateTimeInvariant","page":"Manual","title":"StateSpaceModels.LinearMultivariateTimeInvariant","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.LinearMultivariateTimeVariant","page":"Manual","title":"StateSpaceModels.LinearMultivariateTimeVariant","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"manual/#Hyperparameters","page":"Manual","title":"Hyperparameters","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The model hyperparameters are constant (non-time-varying) parameters that are optimized when fit! is called. The package provides some useful functions to accelerate experimentation and custom model development.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The getters are:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"get_names\nnumber_hyperparameters","category":"page"},{"location":"manual/#StateSpaceModels.get_names","page":"Manual","title":"StateSpaceModels.get_names","text":"get_names(model::StateSpaceModel)\n\nGet the names of the hyperparameters registered on a StateSpaceModel.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.number_hyperparameters","page":"Manual","title":"StateSpaceModels.number_hyperparameters","text":"number_hyperparameters(model::StateSpaceModel)\n\nGet the number of hyperparameters registered on a StateSpaceModel.\n\n\n\n\n\n","category":"function"},{"location":"manual/","page":"Manual","title":"Manual","text":"The setters are:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"fix_hyperparameters!\nset_initial_hyperparameters!","category":"page"},{"location":"manual/#StateSpaceModels.fix_hyperparameters!","page":"Manual","title":"StateSpaceModels.fix_hyperparameters!","text":"fix_hyperparameters!(model::StateSpaceModel, fixed_hyperparameters::Dict)\n\nFixes the desired hyperparameters so that they are not considered as decision variables in the model estimation.\n\nExample\n\njulia> model = LocalLevel(rand(100))\nLocalLevel model\n\njulia> get_names(model)\n2-element Array{String,1}:\n \"sigma2_ε\"\n \"sigma2_η\"\n\njulia> fix_hyperparameters!(model, Dict(\"sigma2_ε\" => 100.0))\nLocalLevel model\n\njulia> model.hyperparameters.fixed_constrained_values\nDict{String,Float64} with 1 entry:\n  \"sigma2_ε\" => 100.0\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.set_initial_hyperparameters!","page":"Manual","title":"StateSpaceModels.set_initial_hyperparameters!","text":"set_initial_hyperparameters!(model::StateSpaceModel,\n                             initial_hyperparameters::Dict{String, <:Real})\n\nFill a model with user inputed initial points for hyperparameter optimzation.\n\nExample\n\njulia> model = LocalLevel(rand(100))\nLocalLevel model\n\njulia> get_names(model)\n2-element Array{String,1}:\n \"sigma2_ε\"\n \"sigma2_η\"\n\njulia> set_initial_hyperparameters!(model, Dict(\"sigma2_η\" => 100.0))\nLocalLevel model\n\njulia> model.hyperparameters.constrained_values\n2-element Array{Float64,1}:\n NaN  \n 100.0\n\n\n\n\n\n","category":"function"},{"location":"manual/","page":"Manual","title":"Manual","text":"Mappings:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"constrain_variance!\nunconstrain_variance!\nconstrain_box!\nunconstrain_box!\nconstrain_identity!\nunconstrain_identity!","category":"page"},{"location":"manual/#StateSpaceModels.constrain_variance!","page":"Manual","title":"StateSpaceModels.constrain_variance!","text":"constrain_variance!(model::StateSpaceModel, str::String)\n\nMap a constrained hyperparameter psi in mathbbR^+ to an unconstrained hyperparameter psi_* in mathbbR.\n\nThe mapping is psi = psi_*^2\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.unconstrain_variance!","page":"Manual","title":"StateSpaceModels.unconstrain_variance!","text":"unconstrain_variance!(model::StateSpaceModel, str::String)\n\nMap an unconstrained hyperparameter psi_* in mathbbR to a constrained hyperparameter  psi in mathbbR^+.\n\nThe mapping is psi_* = sqrtpsi.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.constrain_box!","page":"Manual","title":"StateSpaceModels.constrain_box!","text":"constrain_box!(model::StateSpaceModel, str::String, lb::Fl, ub::Fl) where Fl\n\nMap a constrained hyperparameter psi in lb ub to an unconstrained hyperparameter psi_* in mathbbR.\n\nThe mapping is psi = lb + fracub - lb1 + exp(-psi_*)\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.unconstrain_box!","page":"Manual","title":"StateSpaceModels.unconstrain_box!","text":"unconstrain_box!(model::StateSpaceModel, str::String, lb::Fl, ub::Fl) where Fl\n\nMap an unconstrained hyperparameter psi_* in mathbbR to a constrained hyperparameter psi in lb ub.\n\nThe mapping is psi_* = -ln fracub - lbpsi - lb - 1\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.constrain_identity!","page":"Manual","title":"StateSpaceModels.constrain_identity!","text":"constrain_identity!(model::StateSpaceModel, str::String)\n\nMap an constrained hyperparameter psi in mathbbR to an unconstrained hyperparameter psi_* in mathbbR. This function is necessary to copy values from a location to another inside HyperParameters\n\nThe mapping is psi = psi_*\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.unconstrain_identity!","page":"Manual","title":"StateSpaceModels.unconstrain_identity!","text":"unconstrain_identity!(model::StateSpaceModel, str::String)\n\nMap an unconstrained hyperparameter psi_* in mathbbR to a constrained hyperparameter psi in mathbbR. This function is necessary to copy values from a location to another inside HyperParameters\n\nThe mapping is psi_* = psi\n\n\n\n\n\n","category":"function"},{"location":"manual/#Filters-and-smoothers","page":"Manual","title":"Filters and smoothers","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceModels.jl lets users define tailor-made filters in an easy manner. TODO docs here","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"UnivariateKalmanFilter\nScalarKalmanFilter\nSparseUnivariateKalmanFilter\nFilterOutput\nSmootherOutput\nget_innovations\nget_innovations_variance\nget_filtered_state\nget_filtered_state_variance\nget_predictive_state\nget_predictive_state_variance\nget_smoothed_state\nget_smoothed_state_variance","category":"page"},{"location":"manual/#StateSpaceModels.UnivariateKalmanFilter","page":"Manual","title":"StateSpaceModels.UnivariateKalmanFilter","text":"UnivariateKalmanFilter{Fl <: AbstractFloat}\n\nA Kalman filter that is tailored to univariate systems, exploiting the fact that the dimension of the observations at any time period is 1.\n\nTODO equations and descriptions of a1 and P1\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.ScalarKalmanFilter","page":"Manual","title":"StateSpaceModels.ScalarKalmanFilter","text":"ScalarKalmanFilter{Fl <: Real} <: KalmanFilter\n\nSimilar to the univariate Kalman filter but exploits the fact that the dimension of the state is equal to 1.\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.SparseUnivariateKalmanFilter","page":"Manual","title":"StateSpaceModels.SparseUnivariateKalmanFilter","text":"SparseUnivariateKalmanFilter{Fl <: AbstractFloat}\n\nA Kalman filter that is tailored to sparse univariate systems, exploiting the fact that the dimension of the observations at any time period is 1 and that Z, T and R are sparse.\n\nTODO equations and descriptions of a1 and P1\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.FilterOutput","page":"Manual","title":"StateSpaceModels.FilterOutput","text":"FilterOutput{Fl<:Real}\n\nStructure with the results of the Kalman filter:\n\nv: innovations\nF: variance of innovations\na: predictive state\natt: filtered state\nP: variance of predictive state\nPtt: variance of filtered state\nPinf: diffuse part of the covariance\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.SmootherOutput","page":"Manual","title":"StateSpaceModels.SmootherOutput","text":"SmootherOutput{Fl<:Real}\n\nStructure with the results of the smoother:\n\nalpha: smoothed state\nV: variance of smoothed state\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.get_innovations","page":"Manual","title":"StateSpaceModels.get_innovations","text":"get_innovations\n\nReturns the innovations v obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_innovations_variance","page":"Manual","title":"StateSpaceModels.get_innovations_variance","text":"get_innovations_variance\n\nReturns the variance F of innovations obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_filtered_state","page":"Manual","title":"StateSpaceModels.get_filtered_state","text":"get_filtered_state\n\nReturns the filtered state att obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_filtered_state_variance","page":"Manual","title":"StateSpaceModels.get_filtered_state_variance","text":"get_filtered_state_variance\n\nReturns the variance Ptt of the filtered state obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_predictive_state","page":"Manual","title":"StateSpaceModels.get_predictive_state","text":"get_predictive_state\n\nReturns the predictive state a obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_predictive_state_variance","page":"Manual","title":"StateSpaceModels.get_predictive_state_variance","text":"get_predictive_state_variance\n\nReturns the variance P of the predictive state obtained with the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_smoothed_state","page":"Manual","title":"StateSpaceModels.get_smoothed_state","text":"get_smoothed_state\n\nReturns the smoothed state alpha obtained with the smoother.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.get_smoothed_state_variance","page":"Manual","title":"StateSpaceModels.get_smoothed_state_variance","text":"get_smoothed_state_variance\n\nReturns the variance V of the smoothed state obtained with the smoother.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Fitting-and-Optimizers","page":"Manual","title":"Fitting and Optimizers","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceModels.jl has an interface for Optim.jl algorithms. The models can be estimated using different algorithms and tunned to the user needs","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"fit!\nOptimizer\nresults\nhas_fit_methods\nisfitted","category":"page"},{"location":"manual/#StateSpaceModels.fit!","page":"Manual","title":"StateSpaceModels.fit!","text":"fit!(\n    model::StateSpaceModel;\n    filter::KalmanFilter=default_filter(model),\n    optimizer::Optimizer=Optimizer(Optim.LBFGS()),\n    save_hyperparameter_distribution::Bool=true\n)\n\nEstimate the state-space model parameters via maximum likelihood. The resulting optimal hyperparameters and the corresponding log-likelihood are stored within the model. You can choose the desired filter method (UnivariateKalmanFilter, ScalarKalmanFilter, etc.) and the Optim.jl optimization algortihm. \n\nExample\n\njulia> model = LocalLevel(rand(100))\nLocalLevel model\n\njulia> fit!(model)\nLocalLevel model\n\njulia> model = LocalLinearTrend(LinRange(1, 100, 100) + rand(100))\nLocalLinearTrend model\n\njulia> fit!(model; optimizer = Optimizer(StateSpaceModels.Optim.NelderMead()))\nLocalLinearTrend model\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.Optimizer","page":"Manual","title":"StateSpaceModels.Optimizer","text":"Optimizer\n\nAn Optim.jl wrapper to make the choice of the optimizer straightforward in StateSpaceModels.jl Users can choose among all suitable Optimizers in Optim.jl using very similar syntax.\n\nExample\n\njulia> using Optim\n\n# use a semicolon to avoid displaying the big log\njulia> opt = Optimizer(Optim.LBFGS(), Optim.Options(show_trace = true));\n\n\n\n\n\n","category":"type"},{"location":"manual/#StateSpaceModels.has_fit_methods","page":"Manual","title":"StateSpaceModels.has_fit_methods","text":"has_fit_methods(model_type::Type{<:StateSpaceModel}) -> Bool\n\nVerify if a certain StateSpaceModel has the necessary methods to perform fit!`.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.isfitted","page":"Manual","title":"StateSpaceModels.isfitted","text":"isfitted(model::StateSpaceModel) -> Bool\n\nVerify if model is fitted, i.e., returns false if there is at least one NaN entry in the hyperparameters.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Forecasting-and-simulating","page":"Manual","title":"Forecasting and simulating","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceModels.jl has functions to make forecasts of the predictive densities multiple steps ahead and to simulate scenarios based on those forecasts. The package also has a functions to benchmark the model forecasts  using cross_validation techniques.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"forecast\nsimulate_scenarios\ncross_validation","category":"page"},{"location":"manual/#StateSpaceModels.forecast","page":"Manual","title":"StateSpaceModels.forecast","text":"forecast(model::StateSpaceModel, steps_ahead::Int; kwargs...)\nforecast(model::StateSpaceModel, exogenous::Matrix{Fl}; kwargs...) where Fl\n\nForecast the mean and covariance for future observations from a StateSpaceModel.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.simulate_scenarios","page":"Manual","title":"StateSpaceModels.simulate_scenarios","text":"simulate_scenarios(\n    model::StateSpaceModel, steps_ahead::Int, n_scenarios::Int;\n    filter::KalmanFilter=default_filter(model)\n) -> Array{<:AbstractFloat, 3}\n\nSamples n_scenarios future scenarios via Monte Carlo simulation for steps_ahead using the desired filter.\n\n\n\n\n\n","category":"function"},{"location":"manual/#StateSpaceModels.cross_validation","page":"Manual","title":"StateSpaceModels.cross_validation","text":"cross_validation(model::StateSpaceModel, steps_ahead::Int, start_idx::Int;\n         n_scenarios::Int = 10_000,\n         filter::KalmanFilter=default_filter(model),\n         optimizer::Optimizer=default_optimizer(model)) where Fl\n\nMakes rolling window estimating and forecasting to benchmark the forecasting skill of the model in for different time periods and different lead times. The function returns a struct with the MAE and mean CRPS per lead time. See more on CrossValidation the forecasts of a model\n\nReferences\n\nDTU course \"31761 - Renewables in electricity markets\" available on youtube https://www.youtube.com/watch?v=Ffo8XilZAZw&t=556s\n\n\n\n\n\n","category":"function"},{"location":"manual/#Visualization","page":"Manual","title":"Visualization","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Some user friendly plot recipes are defined using RecipesBase.jl. If you have any suggestions do not hesitate to post it as an issue.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using StateSpaceModels, CSV, DataFrames, Plots\n\nair_passengers = CSV.File(StateSpaceModels.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(air_passengers.passengers)\n\nmodel = BasicStructural(log_air_passengers, 12)\nfit!(model)\nforec = forecast(model, 24)\n\nplot(model, forec; legend = :topleft)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using StateSpaceModels, CSV, DataFrames, Plots\n\nfinland_fatalities = CSV.File(StateSpaceModels.VEHICLE_FATALITIES) |> DataFrame\nlog_finland_fatalities = log.(finland_fatalities.ff)\nmodel = UnobservedComponents(log_finland_fatalities; trend = \"local linear trend\")\nfit!(model)\nks = kalman_smoother(model)\n\nplot(model, ks)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using StateSpaceModels, CSV, DataFrames, Plots\n\nfinland_fatalities = CSV.File(StateSpaceModels.NILE) |> DataFrame\nmodel = UnobservedComponents(nile; trend = \"local level\", cycle = \"stochastic\")\nfit!(model)\nkf = kalman_filter(model)\n\nplotdiagnostics(kf)","category":"page"},{"location":"manual/#Datasets","page":"Manual","title":"Datasets","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package provides some datasets to illustrate the funtionalities and models. These datasets are stored as csv files and the path to these files can be obtained through their names as seen below. In the examples we illustrate the datasets using DataFrames.jl and CSV.jl","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceModels.AIR_PASSENGERS\nStateSpaceModels.FRONT_REAR_SEAT_KSI\nStateSpaceModels.INTERNET\nStateSpaceModels.NILE\nStateSpaceModels.RJ_TEMPERATURE\nStateSpaceModels.VEHICLE_FATALITIES\nStateSpaceModels.WHOLESALE_PRICE_INDEX\nStateSpaceModels.US_CHANGE","category":"page"},{"location":"manual/#StateSpaceModels.AIR_PASSENGERS","page":"Manual","title":"StateSpaceModels.AIR_PASSENGERS","text":"AIR_PASSENGERS\n\nThe absolute path for the AIR_PASSENGERS dataset stored inside StateSpaceModels.jl. This dataset provides monthly totals of a US airline passengers from 1949 to 1960.\n\nSee more on Airline passengers\n\nReferences\n\nhttps://www.stata-press.com/data/r12/ts.html\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.FRONT_REAR_SEAT_KSI","page":"Manual","title":"StateSpaceModels.FRONT_REAR_SEAT_KSI","text":"FRONT_REAR_SEAT_KSI\n\nThe absolute path for the FRONT_REAR_SEAT_KSI dataset stored inside StateSpaceModels.jl. This dataset provides the log of british people killed or serious injuried in road accidents accross UK.\n\nReferences\n\nCommandeur, Jacques J.F. & Koopman, Siem Jan, 2007. \"An Introduction to State Space Time  Series Analysis,\" OUP Catalogue, Oxford University Press (Chapter 3)\nhttp://staff.feweb.vu.nl/koopman/projects/ckbook/OxCodeAll.zip\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.INTERNET","page":"Manual","title":"StateSpaceModels.INTERNET","text":"INTERNET\n\nThe absolute path for the INTERNET dataset stored inside StateSpaceModels.jl. This dataset provides the number of users logged on to an Internet server each minute over 100 minutes.\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods:  Second Edition.\" Oxford University Press. (Chapter 9)\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.NILE","page":"Manual","title":"StateSpaceModels.NILE","text":"NILE\n\nThe absolute path for the NILE dataset stored inside StateSpaceModels.jl. This dataset provides measurements of the annual flow of the Nile river at Aswan from 1871 to 1970, in 10^8 m^3.\n\nSee more on Nile river annual flow\n\nReferences\n\nDurbin, James, & Siem Jan Koopman. (2012). \"Time Series Analysis by State Space Methods: Second Edition.\" Oxford University Press. (Chapter 2)\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.RJ_TEMPERATURE","page":"Manual","title":"StateSpaceModels.RJ_TEMPERATURE","text":"RJ_TEMPERATURE\n\nWeekly mean temperature in Rio de Janeiro in Kelvin (K).\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.VEHICLE_FATALITIES","page":"Manual","title":"StateSpaceModels.VEHICLE_FATALITIES","text":"VEHICLE_FATALITIES\n\nThe absolute path for the VEHICLE_FATALITIES dataset stored inside StateSpaceModels.jl. This dataset provides the number of annual road traffic fatalities in Norway and Finland.\n\nSee more on Finland road traffic fatalities\n\nReferences\n\nCommandeur, Jacques J.F. & Koopman, Siem Jan, 2007. \"An Introduction to State Space Time  Series Analysis,\" OUP Catalogue, Oxford University Press (Chapter 3)\nhttp://staff.feweb.vu.nl/koopman/projects/ckbook/OxCodeAll.zip\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.WHOLESALE_PRICE_INDEX","page":"Manual","title":"StateSpaceModels.WHOLESALE_PRICE_INDEX","text":"WHOLESALE_PRICE_INDEX\n\nTODO\n\n\n\n\n\n","category":"constant"},{"location":"manual/#StateSpaceModels.US_CHANGE","page":"Manual","title":"StateSpaceModels.US_CHANGE","text":"US_CHANGE\n\nPercentage changes in quarterly personal consumption expenditure, personal disposable income, production, savings and the unemployment rate for the US, 1960 to 2016.\n\nFederal Reserve Bank of St Louis.\n\nReferences\n\nHyndman, Rob J., Athanasopoulos, George. \"Forecasting: Principles and Practice\"\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/LAMPSPUC/StateSpaceModels.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star LAMPSPUC/StateSpaceModels.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#StateSpaceModels.jl-Documentation","page":"Home","title":"StateSpaceModels.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StateSpaceModels.jl is a package for modeling, forecasting, and simulating time series in a state-space framework. Implementations were made based on the book \"Time Series Analysis by State Space Methods\" (2012) by James Durbin and Siem Jan Koopman. The notation of the variables in the code also aims to follow the book.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is registered so you can simply add it using Julia's Pkg manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add StateSpaceModels","category":"page"},{"location":"#Citing-StateSpaceModels.jl","page":"Home","title":"Citing StateSpaceModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use StateSpaceModels.jl in your work, we kindly ask you to cite the following paper (pdf):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{SaavedraBodinSouto2019,\ntitle={StateSpaceModels.jl: a Julia Package for Time-Series Analysis in a State-Space Framework},\nauthor={Raphael Saavedra and Guilherme Bodin and Mario Souto},\njournal={arXiv preprint arXiv:1908.01757},\nyear={2019}\n}","category":"page"}]
}
